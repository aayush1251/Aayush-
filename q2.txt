// C++ program to remove all adjacent duplicates from a
// string
#include <bits/stdc++.h>
using namespace std;


char* removeUtil(char* str, char* last_removed)
{

	// If length of string is 1 or 0
	if (str[0] == '\0' || str[1] == '\0')
		return str;

	// Remove leftmost same characters and recur for
	// remaining string
	if (str[0] == str[1]) {
		*last_removed = str[0];
		while (str[1] && str[0] == str[1])
			str++;
		str++;
		return removeUtil(str, last_removed);
	}

	
	char* rem_str = removeUtil(str + 1, last_removed);

	
	if (rem_str[0] && rem_str[0] == str[0]) {
		*last_removed = str[0];

		// Remove first character
		return (rem_str + 1);
	}

	
	if (rem_str[0] == '\0' && *last_removed == str[0])
		return rem_str;

	
	rem_str--;
	rem_str[0] = str[0];
	return rem_str;
}

// Function to remove
char* remove(char* str)
{
	char last_removed = '\0';
	return removeUtil(str, &last_removed);
}

// Driver program to test above functions
int main()
{
	char str1[] = "Mississippi";
	cout << remove(str1) << endl;

	char str2[] = "Basssssannnnnnt";
	cout << remove(str2) << endl;
	
	char str3[] = "careermonk";
	cout << remove(str3) << endl;
	
	return 0;
}


